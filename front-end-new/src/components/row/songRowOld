import React, { useContext, useEffect, useState, useRef } from 'react'
import { makeStyles } from '@material-ui/core/styles'
import ListItem from '@material-ui/core/ListItem'
import ListItemIcon from '@material-ui/core/ListItemIcon'
import ListItemText from '@material-ui/core/ListItemText'
import IconButton from '@material-ui/core/IconButton'
import MoreHorizIcon from '@material-ui/icons/MoreHoriz'
import Typography from '@material-ui/core/Typography'
import { Link, useHistory } from 'react-router-dom'
import AppContext from '../../context/app-context'
import ROUTE from '../../mylib/constant/route'
import FavoriteIcon from '@material-ui/icons/Favorite'
import StarSharpIcon from '@material-ui/icons/StarSharp'
import { isExists } from '../../mylib/supports/functions'
import { useFavStatus } from '../../hook/customs/useHooks'
import { ACTION } from '../../mylib/constant/constStr'
import SubList from '../panel/SubList'
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import {
    usePopupState,
    bindTrigger,
    bindMenu,
  } from 'material-ui-popup-state/hooks'

const useStyle = makeStyles(() => ({
    info: {
        minWidth: '65%'
    },
    indexStyle: {
        fontSize: '20px',
        marginRight: '17px',
        marginTop: '3%'
        // Width : '60%'
    },
    listItem: {
        alignItems: 'center',
        maxHeight: '90px',
        padding: '10px'
    },
    img: {
        width: '65px',
        marginRight: '13px',
        maxWidth: '100%',
        maxHeight: '100%',
        borderRadius: '5%'
    },
    divArtists: {
        color: 'inherit',
        textDecoration: 'none',
        '&:hover': {
            color: '#d60446'
        },

    },
    imgPlayingParent: {
        display: 'flex',
        justifyContent: 'center'
    },
    imgGifPlaying: {
        position: 'absolute',
        marginTop: '3%',
        marginRight: '1%'
    }
}))
const options = [
    "Add to playlist"
]
const SongRow = ({ index, songInfo, selected }) => {
    const popupState = usePopupState({ variant: 'popover', popupId: 'demoMenu' })

    const { account, dispatchAccount, selections, dispatchSelect } = useContext(AppContext)
    const [isFav, setisFav, setshouldUpdate] = useFavStatus('song', songInfo, songInfo.song_id,
        dispatchAccount,
        isExists(account.favSongs, { song_id: songInfo.song_id })
    )
    const classes = useStyle()
    const history = useHistory()
    const isSame = selections.selecting.parent.id === selections.selected.parent.id
    const [isOpen, setOpen] = useState(false);
    const ref = useRef(null);



    const onChangeFav = (e) => {
        e.stopPropagation()
        setshouldUpdate(true)
        account.profile.email !== '' ? setisFav(!isFav) : history.push(ROUTE.SIGN_IN)
    }
    useEffect(() => {
        setshouldUpdate(false)
        setisFav(isExists(account.favSongs, { song_id: songInfo.song_id }))
    }, [account, selections])

    const listen = () => {
        const type = isSame ? ACTION.PLAY_INDEX : ACTION.PLAY_SONGS
        dispatchSelect({ type, index })
    }
    return (
        <div>
            <ListItem className={classes.listItem} selected={selected} button>
                <div onClick={listen} style={{ width: '75%', display: 'flex' }}>
                    <div className={classes.indexStyle} >{`${index + 1}`}</div>
                    <div className={classes.imgPlayingParent}>

                        {
                            (selections.isPlaying && selected) ?
                                <img src='/images/playing.gif' alt='playing gif' className={classes.imgGifPlaying} />
                                :
                                null}

                        <img src={songInfo.cover} alt='song cover' className={classes.img} />
                    </div>
                    <ListItemText className={classes.info}

                        primary={<div style={{ fontWeight: 'bold' }}>{songInfo.title}</div>}
                        secondary={
                            <Typography style={{ fontWeight: 'lighter' }}>{

                                songInfo.artists.map(artist =>
                                    <Link
                                        to={'/artists/' + artist.artist_id}
                                        className={classes.divArtists}
                                        key={'artist:' + artist.artist_id}
                                        onClick={(e) => e.stopPropagation()}
                                    >{artist.fullName + ', '}

                                    </Link>)

                            }</Typography>
                        }
                    />
                    <ListItemText primary={`${parseInt((songInfo.duration) / 60)}:${(songInfo.duration) % 60}`} style={{ marginTop: '3%' }} />
                </div>
                <div>
                    <ListItemIcon onClick={(e) => e.stopPropagation()}>

                        <IconButton disabled>
                            <StarSharpIcon style={{ color: songInfo.premium ? '#ebf200' : 'inherit' }} />
                        </IconButton>

                        <IconButton onClick={onChangeFav}>
                            <FavoriteIcon color={isFav ? 'secondary' : 'inherit'} />
                        </IconButton>
                        <div >
                            <IconButton ref={ref} onClick={() => setOpen(true)}>
                                <MoreHorizIcon />
                            </IconButton>
                            <ControlledMenu
                                onClose={() => !document.getElementById("outsideSongMenu").contains(document.activeElement) && setOpen(false)}
                                anchorRef={ref} isOpen={isOpen}
                                style={{ backgroundColor: 'inherit' }}>
                                <SubMenu label={'Add to playlist'} >
                                    <MenuItem >
                                        <SubList song={songInfo}/>
                                    </MenuItem>
                                </SubMenu>
                            </ControlledMenu>
                        </div>
                    </ListItemIcon>
                </div>
            </ListItem>
        </div>
    );
}

export default React.memo(SongRow)
